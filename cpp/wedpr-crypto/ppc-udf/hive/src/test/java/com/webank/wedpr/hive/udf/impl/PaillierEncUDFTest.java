package com.webank.wedpr.hive.udf;

import java.math.BigDecimal;

import com.webank.wedpr.hive.udf.impl.paillier.PaillierDecryptionUDF;
import com.webank.wedpr.hive.udf.impl.paillier.PaillierEncryptionUDF;
import org.apache.hadoop.io.Text;
import org.junit.Assert;
import org.junit.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.webank.wedpr.hive.udf.impl.paillier.PaillierDecryptionUDF;
import com.webank.wedpr.hive.udf.impl.paillier.PaillierEncryptionUDF;

/**
 * @author caryliao
 * @date 2023/12/02
 */

public class PaillierEncUDFTest {
    private static final Logger logger = LoggerFactory.getLogger(PaillierEncUDFTest.class);

    @Test
    public void testPaillierDecryptionUDFEvaluate() {
        String plainValue = "1000.123";
        PaillierEncryptionUDF paillierEncUDF = new PaillierEncryptionUDF();
        PaillierDecryptionUDF paillierDecUDF = new PaillierDecryptionUDF();
        String hexPublicKey =
                "00000800010100E74CF4A6DD95032412678A2702C6B1C158F0DC94F72191311DC8FA3A2608AAC2F287D3BE7D2583EE7F042B1DBC42C8FE149669D4A36A77A49956D9DFC83DCBD38AB03F7324CB5071EEED8C7FAE108BA4C79639CAFEB4FF96A87EFAAB4580F8CDFCD9FC55BAD63AF2B27BF84B568348228ED7CE8A16A1220CB323301D7F4475A7BAB747477D9056CF9D1FDDE6EBDF4D94814B4A530FB84CC34E36AD0E8DCA220F7E354B4C471B699B155A3463C8A74DE5E824897F519A4BBF01E11FD3F62A349B0604003FB6BC00C1C25173AF4FA610B760114CC55BB92A4173B90A52DE2009C5B18F86725A27B6DA19ED60BD208C5F1875E151CD8DA8D689543C50347A23ED5D0201FF0D6877B3378C46D2839EEF71C78042F99218C2C3E6A3EEB741BAD372E2B5B7FFA222BEBA5C3C18A1B3E4AC890F5AFBAE460607A558743738D11E53EDFA00A54D209A0F52410576ACDD2F28D448B3E48F054A066BEEFA61207E29BB0BDC1EA1EA1B674A94D63D72CC57C55F8250E3EB01F1A4AD42FA14F9EAF92D880CF279DFF50A2AD6FD062B026886FF23BBE310EA1E324BF83B6860A864BD9E28B5DBE5D01173E090827262A65FA7EB0729860808DE9DEB9B2D17B0EABCB3699635EB5B4676AA7E7C533F361FDBE578DA114C6771EEE97894291796A03F1519C77ADBF8697741E48E1DC8E0B15667B617631155E88D9D6781B0FC2D26BD9A121620B2A65ACD099FE494BD887021759E7A16AAA570C881964DF67152E7D578A1751E09B11461A1ACF5FDAEFEAC5410BC5970BE924E56551F7763FD293669F24FAE322931DACDB27A6A865E0F5875A5C26082A329CEDEA47A5F2776DFD2144389AB5EC5358CFAB44B481851ED03292AB79B3E59EF0B0CB8DCE7CEE102E5E0A7597150B297FFEFFF80ED684C1CC5A0DE369EC2B636F1F9B41F4372B4AF662C71F89F0AD456595423CE4B3A38E5998CBB5EA096C9AFAABD9B48DE8BC5819F95C47E7576CAC92CADC4E00175252D6BFD1C5D585442AD5C4285A6878DE9A65D425AF3B61359D9B39C1427923CEB5B82B1CFBF4941DA0454746CD79E30912998A6407F34C29713C210";
        String hexPrivateKey =
                "0000080001010073A67A536ECA81920933C513816358E0AC786E4A7B90C8988EE47D1D130455617943E9DF3E92C1F73F82158EDE21647F0A4B34EA51B53BD24CAB6CEFE41EE5E9C5581FB99265A838F776C63FD70845D263CB1CE57F5A7FCB543F7D55A2C07C66FE6CFE2ADD6B1D79593DFC25AB41A411476BE7450B5091065991980EBFA23AD2E9B9754B13E1E9AE0BC19C51CAEC71C1C9CD71F0232D3FED74C35F3D8A370CF85AED749E4E37E306B9CF5823A1F4257A536AF45983E85B171D2BB8E9A60ECABC53AA9C90D370DC05D348144C44E519FC397465EDA930FC4EA84D942E8B80D5C766E817790C6B1BBDECBEECFA30A966E9013302F8C9E28FE30292857F38951F8E008100FFA5C3FBECCA8C8EE0336C384A7CDFB8996480E432AF757624A8B24509DB56529C86A64B933E79649C54E8AE4059BF7EFE675B3678924497A866CEBAB68AC8331FE95A72FE494D5B99CD5BE8343C187DC00F788DF1D6263FEE4C09D99DA58AF004CBAA2EA523B92AB0C2935D92DB203ABB4BE46389A7CF0A55E8F56B0B0188CB008100E79E98B56901F6E4A569390B0B898A58544BE58E96AE577240073C4E6F80B1CC2BD3BBC4176D2A2905669B6E4465437242E74595D13750F91F22DF45F381D6EF3EC56CAB1190FB5A81F3EF2E919FC4412D19085C17810B6434D1D81C2978D346DEF3AD519C2DC6338FACF36B2C5E710BB82F6778703BE7B8F92E4FCAFDF82577";
        long startTime1 = System.nanoTime();
        Text cipherValue = paillierEncUDF.evaluate(new Text(plainValue));
        System.out.println("cipherValue:" + cipherValue.toString());
        long endTime1 = System.nanoTime();
        System.out.println("paillierEncUDF cost time(ns):" + (endTime1 - startTime1));
        long startTime2 = System.nanoTime();
        String decryptValueStr = paillierDecUDF.evaluate(cipherValue).toString();
        long endTime2 = System.nanoTime();
        System.out.println("paillierDecUDF cost time(ns):" + (endTime2 - startTime2));
        System.out.println("decryptValueStr:" + decryptValueStr);
        Assert.assertTrue(new BigDecimal(plainValue).compareTo(new BigDecimal(decryptValueStr)) == 0);;
    }

}
