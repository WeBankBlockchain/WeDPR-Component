/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.2.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.webank.wedpr.sdk.jni.generated;

public class IFront extends IFrontClient {
    private transient long swigCPtr;
    private transient boolean swigCMemOwnDerived;

    protected IFront(long cPtr, boolean cMemoryOwn) {
        super(wedpr_java_transportJNI.IFront_SWIGSmartPtrUpcast(cPtr), true);
        swigCMemOwnDerived = cMemoryOwn;
        swigCPtr = cPtr;
    }

    protected static long getCPtr(IFront obj) {
        return (obj == null) ? 0 : obj.swigCPtr;
    }

    protected void swigSetCMemOwn(boolean own) {
        swigCMemOwnDerived = own;
        super.swigSetCMemOwn(own);
    }

    @SuppressWarnings({"deprecation", "removal"})
    protected void finalize() {
        delete();
    }

    public synchronized void delete() {
        if (swigCPtr != 0) {
            if (swigCMemOwnDerived) {
                swigCMemOwnDerived = false;
                wedpr_java_transportJNI.delete_IFront(swigCPtr);
            }
            swigCPtr = 0;
        }
        super.delete();
    }

    /**
     * start the IFront<br>
     * <br>
     */
    public void start() {
        wedpr_java_transportJNI.IFront_start(swigCPtr, this);
    }

    /**
     * stop the IFront<br>
     * <br>
     */
    public void stop() {
        wedpr_java_transportJNI.IFront_stop(swigCPtr, this);
    }

    public void register_topic_handler(String topic, MessageDispatcherHandler callback) {
        wedpr_java_transportJNI.IFront_register_topic_handler(
                swigCPtr, this, topic, MessageDispatcherHandler.getCPtr(callback), callback);
    }

    public void register_msg_handler(String componentType, MessageDispatcherHandler callback) {
        wedpr_java_transportJNI.IFront_register_msg_handler(
                swigCPtr,
                this,
                componentType,
                MessageDispatcherHandler.getCPtr(callback),
                callback);
    }

    public void async_send_message(
            int routeType,
            MessageOptionalHeader routeInfo,
            byte[] payload,
            java.math.BigInteger payloadSize,
            int seq,
            int timeout,
            ErrorCallback errorCallback,
            IMessageHandler msgHandler) {
        wedpr_java_transportJNI.IFront_async_send_message(
                swigCPtr,
                this,
                routeType,
                MessageOptionalHeader.getCPtr(routeInfo),
                routeInfo,
                payload,
                payloadSize,
                seq,
                timeout,
                ErrorCallback.getCPtr(errorCallback),
                errorCallback,
                IMessageHandler.getCPtr(msgHandler),
                msgHandler);
    }

    public void async_send_response(
            byte[] dstNode,
            java.math.BigInteger dstNodeSize,
            String traceID,
            byte[] payload,
            java.math.BigInteger payloadSize,
            int seq,
            ErrorCallback errorCallback) {
        wedpr_java_transportJNI.IFront_async_send_response(
                swigCPtr,
                this,
                dstNode,
                dstNodeSize,
                traceID,
                payload,
                payloadSize,
                seq,
                ErrorCallback.getCPtr(errorCallback),
                errorCallback);
    }

    public Error push(
            int routeType, MessageOptionalHeader routeInfo, ubytes payload, int seq, int timeout) {
        long cPtr =
                wedpr_java_transportJNI.IFront_push(
                        swigCPtr,
                        this,
                        routeType,
                        MessageOptionalHeader.getCPtr(routeInfo),
                        routeInfo,
                        ubytes.swigRelease(payload),
                        payload,
                        seq,
                        timeout);
        return (cPtr == 0) ? null : new Error(cPtr, true);
    }

    public Error push_msg(
            int routeType,
            MessageOptionalHeader routeInfo,
            byte[] payload,
            java.math.BigInteger payloadSize,
            int seq,
            int timeout) {
        long cPtr =
                wedpr_java_transportJNI.IFront_push_msg(
                        swigCPtr,
                        this,
                        routeType,
                        MessageOptionalHeader.getCPtr(routeInfo),
                        routeInfo,
                        payload,
                        payloadSize,
                        seq,
                        timeout);
        return (cPtr == 0) ? null : new Error(cPtr, true);
    }

    public Message pop(String topic, int timeoutMs) {
        long cPtr = wedpr_java_transportJNI.IFront_pop(swigCPtr, this, topic, timeoutMs);
        return (cPtr == 0) ? null : new Message(cPtr, true);
    }

    public Message peek(String topic) {
        long cPtr = wedpr_java_transportJNI.IFront_peek(swigCPtr, this, topic);
        return (cPtr == 0) ? null : new Message(cPtr, true);
    }

    public void asyncGetPeers(GetPeersInfoHandler getPeersCallback) {
        wedpr_java_transportJNI.IFront_asyncGetPeers(
                swigCPtr, this, GetPeersInfoHandler.getCPtr(getPeersCallback), getPeersCallback);
    }

    /**
     * register the nodeInfo to the gateway<br>
     *
     * @param nodeInfo the nodeInfo
     */
    public Error registerNodeInfo(SWIGTYPE_p_ppc__protocol__INodeInfo__Ptr nodeInfo) {
        long cPtr =
                wedpr_java_transportJNI.IFront_registerNodeInfo(
                        swigCPtr, this, SWIGTYPE_p_ppc__protocol__INodeInfo__Ptr.getCPtr(nodeInfo));
        return (cPtr == 0) ? null : new Error(cPtr, true);
    }

    /** unRegister the nodeInfo to the gateway */
    public Error unRegisterNodeInfo() {
        long cPtr = wedpr_java_transportJNI.IFront_unRegisterNodeInfo(swigCPtr, this);
        return (cPtr == 0) ? null : new Error(cPtr, true);
    }

    public SWIGTYPE_p_ppc__protocol__INodeInfo__Ptr nodeInfo() {
        return new SWIGTYPE_p_ppc__protocol__INodeInfo__Ptr(
                wedpr_java_transportJNI.IFront_nodeInfo(swigCPtr, this), false);
    }

    /**
     * register the topic<br>
     * <br>
     *
     * @param topic the topic to register
     */
    public Error registerTopic(String topic) {
        long cPtr = wedpr_java_transportJNI.IFront_registerTopic(swigCPtr, this, topic);
        return (cPtr == 0) ? null : new Error(cPtr, true);
    }

    /**
     * unRegister the topic<br>
     * <br>
     *
     * @param topic the topic to unregister
     */
    public Error unRegisterTopic(String topic) {
        long cPtr = wedpr_java_transportJNI.IFront_unRegisterTopic(swigCPtr, this, topic);
        return (cPtr == 0) ? null : new Error(cPtr, true);
    }

    public void registerComponent(String component) {
        wedpr_java_transportJNI.IFront_registerComponent(swigCPtr, this, component);
    }

    public void unRegisterComponent(String component) {
        wedpr_java_transportJNI.IFront_unRegisterComponent(swigCPtr, this, component);
    }

    public StringVec selectNodesByRoutePolicy(short routeType, MessageOptionalHeader routeInfo) {
        return new StringVec(
                wedpr_java_transportJNI.IFront_selectNodesByRoutePolicy(
                        swigCPtr,
                        this,
                        routeType,
                        MessageOptionalHeader.getCPtr(routeInfo),
                        routeInfo),
                true);
    }
}
