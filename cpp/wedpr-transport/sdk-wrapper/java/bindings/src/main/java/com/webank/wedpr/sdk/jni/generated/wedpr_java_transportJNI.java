/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.2.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.webank.wedpr.sdk.jni.generated;

public class wedpr_java_transportJNI {
    public static final native long new_SharedBcosError();

    public static final native void delete_SharedBcosError(long jarg1);

    public static final native long new_SharedFrontConfig();

    public static final native void delete_SharedFrontConfig(long jarg1);

    public static final native long new_SharedGrpcConfig();

    public static final native void delete_SharedGrpcConfig(long jarg1);

    public static final native long new_SharedFront();

    public static final native void delete_SharedFront(long jarg1);

    public static final native long new_SharedNodeDiscovery();

    public static final native void delete_SharedNodeDiscovery(long jarg1);

    public static final native long new_SharedFrontClient();

    public static final native void delete_SharedFrontClient(long jarg1);

    public static final native long new_SharedErrorCallback();

    public static final native void delete_SharedErrorCallback(long jarg1);

    public static final native long new_SharedMessageDispatcherHandler();

    public static final native void delete_SharedMessageDispatcherHandler(long jarg1);

    public static final native long new_SharedIMessageHandler();

    public static final native void delete_SharedIMessageHandler(long jarg1);

    public static final native long new_SharedGetPeersInfoHandler();

    public static final native void delete_SharedGetPeersInfoHandler(long jarg1);

    public static final native long new_SharedGateway();

    public static final native void delete_SharedGateway(long jarg1);

    public static final native long new_SharedMessage();

    public static final native void delete_SharedMessage(long jarg1);

    public static final native long new_SharedMessageHeader();

    public static final native void delete_SharedMessageHeader(long jarg1);

    public static final native long new_SharedMessagePayload();

    public static final native void delete_SharedMessagePayload(long jarg1);

    public static final native long new_SharedRouteInfo();

    public static final native void delete_SharedRouteInfo(long jarg1);

    public static final native long new_SharedMessageBuilder();

    public static final native void delete_SharedMessageBuilder(long jarg1);

    public static final native long new_SharedMessageHeaderBuilder();

    public static final native void delete_SharedMessageHeaderBuilder(long jarg1);

    public static final native long new_SharedMessagePayloadBuilder();

    public static final native void delete_SharedMessagePayloadBuilder(long jarg1);

    public static final native long new_SharedRouteInfoBuilder();

    public static final native void delete_SharedRouteInfoBuilder(long jarg1);

    public static final native long new_SharedNodeInfo();

    public static final native void delete_SharedNodeInfo(long jarg1);

    public static final native long new_ubytes__SWIG_0();

    public static final native long new_ubytes__SWIG_1(long jarg1, ubytes jarg1_);

    public static final native boolean ubytes_isEmpty(long jarg1, ubytes jarg1_);

    public static final native void ubytes_clear(long jarg1, ubytes jarg1_);

    public static final native long new_ubytes__SWIG_2(int jarg1, short jarg2);

    public static final native int ubytes_doCapacity(long jarg1, ubytes jarg1_);

    public static final native void ubytes_doReserve(long jarg1, ubytes jarg1_, int jarg2);

    public static final native int ubytes_doSize(long jarg1, ubytes jarg1_);

    public static final native void ubytes_doAdd__SWIG_0(long jarg1, ubytes jarg1_, short jarg2);

    public static final native void ubytes_doAdd__SWIG_1(
            long jarg1, ubytes jarg1_, int jarg2, short jarg3);

    public static final native short ubytes_doRemove(long jarg1, ubytes jarg1_, int jarg2);

    public static final native short ubytes_doGet(long jarg1, ubytes jarg1_, int jarg2);

    public static final native short ubytes_doSet(
            long jarg1, ubytes jarg1_, int jarg2, short jarg3);

    public static final native void ubytes_doRemoveRange(
            long jarg1, ubytes jarg1_, int jarg2, int jarg3);

    public static final native void delete_ubytes(long jarg1);

    public static final native long new_ibytes__SWIG_0();

    public static final native long new_ibytes__SWIG_1(long jarg1, ibytes jarg1_);

    public static final native boolean ibytes_isEmpty(long jarg1, ibytes jarg1_);

    public static final native void ibytes_clear(long jarg1, ibytes jarg1_);

    public static final native long new_ibytes__SWIG_2(int jarg1, byte jarg2);

    public static final native int ibytes_doCapacity(long jarg1, ibytes jarg1_);

    public static final native void ibytes_doReserve(long jarg1, ibytes jarg1_, int jarg2);

    public static final native int ibytes_doSize(long jarg1, ibytes jarg1_);

    public static final native void ibytes_doAdd__SWIG_0(long jarg1, ibytes jarg1_, byte jarg2);

    public static final native void ibytes_doAdd__SWIG_1(
            long jarg1, ibytes jarg1_, int jarg2, byte jarg3);

    public static final native byte ibytes_doRemove(long jarg1, ibytes jarg1_, int jarg2);

    public static final native byte ibytes_doGet(long jarg1, ibytes jarg1_, int jarg2);

    public static final native byte ibytes_doSet(long jarg1, ibytes jarg1_, int jarg2, byte jarg3);

    public static final native void ibytes_doRemoveRange(
            long jarg1, ibytes jarg1_, int jarg2, int jarg3);

    public static final native void delete_ibytes(long jarg1);

    public static final native long new_StringVec__SWIG_0();

    public static final native long new_StringVec__SWIG_1(long jarg1, StringVec jarg1_);

    public static final native boolean StringVec_isEmpty(long jarg1, StringVec jarg1_);

    public static final native void StringVec_clear(long jarg1, StringVec jarg1_);

    public static final native long new_StringVec__SWIG_2(int jarg1, String jarg2);

    public static final native int StringVec_doCapacity(long jarg1, StringVec jarg1_);

    public static final native void StringVec_doReserve(long jarg1, StringVec jarg1_, int jarg2);

    public static final native int StringVec_doSize(long jarg1, StringVec jarg1_);

    public static final native void StringVec_doAdd__SWIG_0(
            long jarg1, StringVec jarg1_, String jarg2);

    public static final native void StringVec_doAdd__SWIG_1(
            long jarg1, StringVec jarg1_, int jarg2, String jarg3);

    public static final native String StringVec_doRemove(long jarg1, StringVec jarg1_, int jarg2);

    public static final native String StringVec_doGet(long jarg1, StringVec jarg1_, int jarg2);

    public static final native String StringVec_doSet(
            long jarg1, StringVec jarg1_, int jarg2, String jarg3);

    public static final native void StringVec_doRemoveRange(
            long jarg1, StringVec jarg1_, int jarg2, int jarg3);

    public static final native void delete_StringVec(long jarg1);

    public static final native long new_NodeInfoVec__SWIG_0();

    public static final native long new_NodeInfoVec__SWIG_1(long jarg1, NodeInfoVec jarg1_);

    public static final native boolean NodeInfoVec_isEmpty(long jarg1, NodeInfoVec jarg1_);

    public static final native void NodeInfoVec_clear(long jarg1, NodeInfoVec jarg1_);

    public static final native long new_NodeInfoVec__SWIG_2(
            int jarg1, long jarg2, INodeInfo jarg2_);

    public static final native int NodeInfoVec_doCapacity(long jarg1, NodeInfoVec jarg1_);

    public static final native void NodeInfoVec_doReserve(
            long jarg1, NodeInfoVec jarg1_, int jarg2);

    public static final native int NodeInfoVec_doSize(long jarg1, NodeInfoVec jarg1_);

    public static final native void NodeInfoVec_doAdd__SWIG_0(
            long jarg1, NodeInfoVec jarg1_, long jarg2, INodeInfo jarg2_);

    public static final native void NodeInfoVec_doAdd__SWIG_1(
            long jarg1, NodeInfoVec jarg1_, int jarg2, long jarg3, INodeInfo jarg3_);

    public static final native long NodeInfoVec_doRemove(long jarg1, NodeInfoVec jarg1_, int jarg2);

    public static final native long NodeInfoVec_doGet(long jarg1, NodeInfoVec jarg1_, int jarg2);

    public static final native long NodeInfoVec_doSet(
            long jarg1, NodeInfoVec jarg1_, int jarg2, long jarg3, INodeInfo jarg3_);

    public static final native void NodeInfoVec_doRemoveRange(
            long jarg1, NodeInfoVec jarg1_, int jarg2, int jarg3);

    public static final native void delete_NodeInfoVec(long jarg1);

    public static final native long Error_buildError__SWIG_0(
            byte[] jarg1, byte[] jarg2, int jarg3, int jarg4, String jarg5);

    public static final native long Error_buildError__SWIG_1(
            byte[] jarg1,
            byte[] jarg2,
            int jarg3,
            int jarg4,
            String jarg5,
            long jarg6,
            Error jarg6_);

    public static final native long Error_buildError__SWIG_2(
            byte[] jarg1, byte[] jarg2, int jarg3, int jarg4, String jarg5, long jarg6);

    public static final native long new_Error__SWIG_0();

    public static final native long new_Error__SWIG_1(long jarg1, String jarg2);

    public static final native void delete_Error(long jarg1);

    public static final native long Error_errorCode(long jarg1, Error jarg1_);

    public static final native String Error_errorMessage(long jarg1, Error jarg1_);

    public static final native void Error_setErrorCode(long jarg1, Error jarg1_, long jarg2);

    public static final native void Error_setErrorMessage(long jarg1, Error jarg1_, String jarg2);

    public static final native void InputBuffer_data_set(
            long jarg1, InputBuffer jarg1_, long jarg2);

    public static final native long InputBuffer_data_get(long jarg1, InputBuffer jarg1_);

    public static final native void InputBuffer_len_set(
            long jarg1, InputBuffer jarg1_, java.math.BigInteger jarg2);

    public static final native java.math.BigInteger InputBuffer_len_get(
            long jarg1, InputBuffer jarg1_);

    public static final native long new_InputBuffer();

    public static final native void delete_InputBuffer(long jarg1);

    public static final native void OutputBuffer_data_set(
            long jarg1, OutputBuffer jarg1_, long jarg2);

    public static final native long OutputBuffer_data_get(long jarg1, OutputBuffer jarg1_);

    public static final native void OutputBuffer_len_set(
            long jarg1, OutputBuffer jarg1_, java.math.BigInteger jarg2);

    public static final native java.math.BigInteger OutputBuffer_len_get(
            long jarg1, OutputBuffer jarg1_);

    public static final native long new_OutputBuffer();

    public static final native void delete_OutputBuffer(long jarg1);

    public static final native void delete_FrontConfig(long jarg1);

    public static final native int FrontConfig_threadPoolSize(long jarg1, FrontConfig jarg1_);

    public static final native void FrontConfig_setThreadPoolSize(
            long jarg1, FrontConfig jarg1_, int jarg2);

    public static final native String FrontConfig_nodeID(long jarg1, FrontConfig jarg1_);

    public static final native void FrontConfig_setNodeID(
            long jarg1, FrontConfig jarg1_, String jarg2);

    public static final native long FrontConfig_selfEndPoint(long jarg1, FrontConfig jarg1_);

    public static final native long FrontConfig_mutableSelfEndPoint(long jarg1, FrontConfig jarg1_);

    public static final native void FrontConfig_setSelfEndPoint(
            long jarg1, FrontConfig jarg1_, long jarg2, EndPoint jarg2_);

    public static final native void FrontConfig_setGatewayGrpcTarget(
            long jarg1, FrontConfig jarg1_, String jarg2);

    public static final native String FrontConfig_gatewayGrpcTarget(long jarg1, FrontConfig jarg1_);

    public static final native void FrontConfig_setGrpcConfig(
            long jarg1, FrontConfig jarg1_, long jarg2, GrpcConfig jarg2_);

    public static final native long FrontConfig_grpcConfig(long jarg1, FrontConfig jarg1_);

    public static final native long FrontConfig_generateNodeInfo(long jarg1, FrontConfig jarg1_);

    public static final native long FrontConfig_getComponents(long jarg1, FrontConfig jarg1_);

    public static final native void FrontConfig_setComponents(
            long jarg1, FrontConfig jarg1_, long jarg2, StringVec jarg2_);

    public static final native void FrontConfig_addComponent(
            long jarg1, FrontConfig jarg1_, String jarg2);

    public static final native long FrontConfig_mutableComponents(long jarg1, FrontConfig jarg1_);

    public static final native String FrontConfig_meta(long jarg1, FrontConfig jarg1_);

    public static final native void FrontConfig_setMeta(
            long jarg1, FrontConfig jarg1_, String jarg2);

    public static final native void delete_FrontConfigBuilder(long jarg1);

    public static final native long FrontConfigBuilder_build__SWIG_0(
            long jarg1, FrontConfigBuilder jarg1_);

    public static final native long FrontConfigBuilder_build__SWIG_1(
            long jarg1, FrontConfigBuilder jarg1_, int jarg2, String jarg3);

    public static final native String printFrontDesc(long jarg1, FrontConfig jarg1_);

    public static final native long new_EndPoint__SWIG_0();

    public static final native long new_EndPoint__SWIG_1(String jarg1, int jarg2);

    public static final native void delete_EndPoint(long jarg1);

    public static final native String EndPoint_host(long jarg1, EndPoint jarg1_);

    public static final native int EndPoint_port(long jarg1, EndPoint jarg1_);

    public static final native void EndPoint_setHost(long jarg1, EndPoint jarg1_, String jarg2);

    public static final native void EndPoint_setPort(long jarg1, EndPoint jarg1_, int jarg2);

    public static final native void EndPoint_setListenIp(long jarg1, EndPoint jarg1_, String jarg2);

    public static final native String EndPoint_entryPoint(long jarg1, EndPoint jarg1_);

    public static final native String EndPoint_listenEndPoint(long jarg1, EndPoint jarg1_);

    public static final native String EndPoint_listenIp(long jarg1, EndPoint jarg1_);

    public static final native long new_GrpcServerConfig__SWIG_0();

    public static final native long new_GrpcServerConfig__SWIG_1(
            long jarg1, EndPoint jarg1_, boolean jarg2);

    public static final native String GrpcServerConfig_listenEndPoint(
            long jarg1, GrpcServerConfig jarg1_);

    public static final native void GrpcServerConfig_setEndPoint(
            long jarg1, GrpcServerConfig jarg1_, long jarg2, EndPoint jarg2_);

    public static final native void GrpcServerConfig_setEnableHealthCheck(
            long jarg1, GrpcServerConfig jarg1_, boolean jarg2);

    public static final native long GrpcServerConfig_endPoint(long jarg1, GrpcServerConfig jarg1_);

    public static final native long GrpcServerConfig_mutableEndPoint(
            long jarg1, GrpcServerConfig jarg1_);

    public static final native boolean GrpcServerConfig_enableHealthCheck(
            long jarg1, GrpcServerConfig jarg1_);

    public static final native void delete_GrpcServerConfig(long jarg1);

    public static final native long new_GrpcConfig();

    public static final native void delete_GrpcConfig(long jarg1);

    public static final native String GrpcConfig_loadBalancePolicy(long jarg1, GrpcConfig jarg1_);

    public static final native void GrpcConfig_setLoadBalancePolicy(
            long jarg1, GrpcConfig jarg1_, String jarg2);

    public static final native boolean GrpcConfig_enableHealthCheck(long jarg1, GrpcConfig jarg1_);

    public static final native void GrpcConfig_setEnableHealthCheck(
            long jarg1, GrpcConfig jarg1_, boolean jarg2);

    public static final native void GrpcConfig_setEnableDnslookup(
            long jarg1, GrpcConfig jarg1_, boolean jarg2);

    public static final native boolean GrpcConfig_enableDnslookup(long jarg1, GrpcConfig jarg1_);

    public static final native void delete_MessageOptionalHeader(long jarg1);

    public static final native void MessageOptionalHeader_encode(
            long jarg1, MessageOptionalHeader jarg1_, long jarg2, ubytes jarg2_);

    public static final native long MessageOptionalHeader_decode(
            long jarg1, MessageOptionalHeader jarg1_, long jarg2, java.math.BigInteger jarg3);

    public static final native String MessageOptionalHeader_componentType(
            long jarg1, MessageOptionalHeader jarg1_);

    public static final native void MessageOptionalHeader_setComponentType(
            long jarg1, MessageOptionalHeader jarg1_, String jarg2);

    public static final native byte[] MessageOptionalHeader_srcNodeBuffer(
            long jarg1, MessageOptionalHeader jarg1_);

    public static final native void MessageOptionalHeader_setSrcNodeBuffer(
            long jarg1, MessageOptionalHeader jarg1_, byte[] jarg2, java.math.BigInteger jarg3);

    public static final native byte[] MessageOptionalHeader_dstNodeBuffer(
            long jarg1, MessageOptionalHeader jarg1_);

    public static final native void MessageOptionalHeader_setDstNodeBuffer(
            long jarg1, MessageOptionalHeader jarg1_, byte[] jarg2, java.math.BigInteger jarg3);

    public static final native String MessageOptionalHeader_dstInst(
            long jarg1, MessageOptionalHeader jarg1_);

    public static final native void MessageOptionalHeader_setDstInst(
            long jarg1, MessageOptionalHeader jarg1_, String jarg2);

    public static final native String MessageOptionalHeader_topic(
            long jarg1, MessageOptionalHeader jarg1_);

    public static final native void MessageOptionalHeader_setTopic__SWIG_0(
            long jarg1, MessageOptionalHeader jarg1_, long jarg2);

    public static final native void MessageOptionalHeader_setTopic__SWIG_1(
            long jarg1, MessageOptionalHeader jarg1_, String jarg2);

    public static final native String MessageOptionalHeader_srcInst(
            long jarg1, MessageOptionalHeader jarg1_);

    public static final native void MessageOptionalHeader_setSrcInst(
            long jarg1, MessageOptionalHeader jarg1_, String jarg2);

    public static final native void delete_MessageHeader(long jarg1);

    public static final native void MessageHeader_encode(
            long jarg1, MessageHeader jarg1_, long jarg2, ubytes jarg2_);

    public static final native long MessageHeader_decode(
            long jarg1, MessageHeader jarg1_, long jarg2);

    public static final native short MessageHeader_version(long jarg1, MessageHeader jarg1_);

    public static final native void MessageHeader_setVersion(
            long jarg1, MessageHeader jarg1_, int jarg2);

    public static final native String MessageHeader_traceID(long jarg1, MessageHeader jarg1_);

    public static final native void MessageHeader_setTraceID(
            long jarg1, MessageHeader jarg1_, String jarg2);

    public static final native String MessageHeader_srcGwNode(long jarg1, MessageHeader jarg1_);

    public static final native void MessageHeader_setSrcGwNode(
            long jarg1, MessageHeader jarg1_, String jarg2);

    public static final native String MessageHeader_dstGwNode(long jarg1, MessageHeader jarg1_);

    public static final native void MessageHeader_setDstGwNode(
            long jarg1, MessageHeader jarg1_, String jarg2);

    public static final native int MessageHeader_packetType(long jarg1, MessageHeader jarg1_);

    public static final native void MessageHeader_setPacketType(
            long jarg1, MessageHeader jarg1_, int jarg2);

    public static final native short MessageHeader_ttl(long jarg1, MessageHeader jarg1_);

    public static final native void MessageHeader_setTTL(
            long jarg1, MessageHeader jarg1_, int jarg2);

    public static final native int MessageHeader_ext(long jarg1, MessageHeader jarg1_);

    public static final native void MessageHeader_setExt(
            long jarg1, MessageHeader jarg1_, int jarg2);

    public static final native long MessageHeader_optionalField(long jarg1, MessageHeader jarg1_);

    public static final native void MessageHeader_setOptionalField(
            long jarg1, MessageHeader jarg1_, long jarg2, MessageOptionalHeader jarg2_);

    public static final native int MessageHeader_length(long jarg1, MessageHeader jarg1_);

    public static final native boolean MessageHeader_isRespPacket(long jarg1, MessageHeader jarg1_);

    public static final native void MessageHeader_setRespPacket(long jarg1, MessageHeader jarg1_);

    public static final native long MessageHeader_srcP2PNodeIDView(
            long jarg1, MessageHeader jarg1_);

    public static final native long MessageHeader_dstP2PNodeIDView(
            long jarg1, MessageHeader jarg1_);

    public static final native int MessageHeader_routeType(long jarg1, MessageHeader jarg1_);

    public static final native void MessageHeader_setRouteType(
            long jarg1, MessageHeader jarg1_, long jarg2);

    public static final native boolean MessageHeader_hasOptionalField(
            long jarg1, MessageHeader jarg1_);

    public static final native void delete_Message(long jarg1);

    public static final native long Message_header(long jarg1, Message jarg1_);

    public static final native void Message_setHeader(
            long jarg1, Message jarg1_, long jarg2, MessageHeader jarg2_);

    public static final native int Message_version(long jarg1, Message jarg1_);

    public static final native void Message_setVersion(long jarg1, Message jarg1_, int jarg2);

    public static final native int Message_packetType(long jarg1, Message jarg1_);

    public static final native void Message_setPacketType(long jarg1, Message jarg1_, int jarg2);

    public static final native String Message_seq(long jarg1, Message jarg1_);

    public static final native void Message_setSeq(long jarg1, Message jarg1_, String jarg2);

    public static final native int Message_ext(long jarg1, Message jarg1_);

    public static final native void Message_setExt(long jarg1, Message jarg1_, int jarg2);

    public static final native boolean Message_isRespPacket(long jarg1, Message jarg1_);

    public static final native void Message_setRespPacket(long jarg1, Message jarg1_);

    public static final native void Message_setPayload(
            long jarg1, Message jarg1_, long jarg2, ubytes jarg2_);

    public static final native byte[] Message_payloadBuffer(long jarg1, Message jarg1_);

    public static final native void Message_setFrontMessage(
            long jarg1, Message jarg1_, long jarg2, MessagePayload jarg2_);

    public static final native long Message_frontMessage(long jarg1, Message jarg1_);

    public static final native boolean Message_encode(
            long jarg1, Message jarg1_, long jarg2, ubytes jarg2_);

    public static final native long Message_decode(long jarg1, Message jarg1_, long jarg2);

    public static final native long Message_length(long jarg1, Message jarg1_);

    public static final native long Message_payload(long jarg1, Message jarg1_);

    public static final native void delete_MessageHeaderBuilder(long jarg1);

    public static final native long MessageHeaderBuilder_build__SWIG_0(
            long jarg1, MessageHeaderBuilder jarg1_, long jarg2);

    public static final native long MessageHeaderBuilder_build__SWIG_1(
            long jarg1, MessageHeaderBuilder jarg1_);

    public static final native long MessageHeaderBuilder_build__SWIG_2(
            long jarg1, MessageHeaderBuilder jarg1_, long jarg2, MessageOptionalHeader jarg2_);

    public static final native void delete_MessageBuilder(long jarg1);

    public static final native long MessageBuilder_build__SWIG_0(long jarg1, MessageBuilder jarg1_);

    public static final native long MessageBuilder_build__SWIG_1(
            long jarg1, MessageBuilder jarg1_, long jarg2);

    public static final native long MessageBuilder_build__SWIG_2(
            long jarg1,
            MessageBuilder jarg1_,
            long jarg2,
            long jarg3,
            MessageOptionalHeader jarg3_,
            long jarg4,
            ubytes jarg4_);

    public static final native void delete_MessageOptionalHeaderBuilder(long jarg1);

    public static final native long MessageOptionalHeaderBuilder_build__SWIG_0(
            long jarg1,
            MessageOptionalHeaderBuilder jarg1_,
            long jarg2,
            MessageOptionalHeader jarg2_);

    public static final native long MessageOptionalHeaderBuilder_build__SWIG_1(
            long jarg1, MessageOptionalHeaderBuilder jarg1_);

    public static final native String printOptionalField(long jarg1, MessageOptionalHeader jarg1_);

    public static final native String printMessage(long jarg1, Message jarg1_);

    public static final native int FrontMsgExtFlag_Response_get();

    public static final native void delete_MessagePayload(long jarg1);

    public static final native long MessagePayload_encode(
            long jarg1, MessagePayload jarg1_, long jarg2, ubytes jarg2_);

    public static final native long MessagePayload_decode(
            long jarg1, MessagePayload jarg1_, long jarg2);

    public static final native short MessagePayload_version(long jarg1, MessagePayload jarg1_);

    public static final native void MessagePayload_setVersion(
            long jarg1, MessagePayload jarg1_, short jarg2);

    public static final native byte[] MessagePayload_dataBuffer(long jarg1, MessagePayload jarg1_);

    public static final native int MessagePayload_seq(long jarg1, MessagePayload jarg1_);

    public static final native void MessagePayload_setSeq(
            long jarg1, MessagePayload jarg1_, int jarg2);

    public static final native long MessagePayload_length(long jarg1, MessagePayload jarg1_);

    public static final native String MessagePayload_traceID(long jarg1, MessagePayload jarg1_);

    public static final native void MessagePayload_setTraceID(
            long jarg1, MessagePayload jarg1_, String jarg2);

    public static final native int MessagePayload_ext(long jarg1, MessagePayload jarg1_);

    public static final native void MessagePayload_setExt(
            long jarg1, MessagePayload jarg1_, int jarg2);

    public static final native void MessagePayload_setRespPacket(long jarg1, MessagePayload jarg1_);

    public static final native boolean MessagePayload_isRespPacket(
            long jarg1, MessagePayload jarg1_);

    public static final native void delete_MessagePayloadBuilder(long jarg1);

    public static final native long MessagePayloadBuilder_build__SWIG_0(
            long jarg1, MessagePayloadBuilder jarg1_);

    public static final native long MessagePayloadBuilder_build__SWIG_1(
            long jarg1, MessagePayloadBuilder jarg1_, long jarg2);

    public static final native void delete_INodeInfo(long jarg1);

    public static final native String INodeInfo_endPoint(long jarg1, INodeInfo jarg1_);

    public static final native long INodeInfo_nodeID(long jarg1, INodeInfo jarg1_);

    public static final native void INodeInfo_setNodeID(long jarg1, INodeInfo jarg1_, long jarg2);

    public static final native void INodeInfo_setEndPoint(
            long jarg1, INodeInfo jarg1_, String jarg2);

    public static final native boolean INodeInfo_addComponent(
            long jarg1, INodeInfo jarg1_, String jarg2);

    public static final native boolean INodeInfo_eraseComponent(
            long jarg1, INodeInfo jarg1_, String jarg2);

    public static final native boolean INodeInfo_componentExist(
            long jarg1, INodeInfo jarg1_, String jarg2);

    public static final native long INodeInfo_copiedComponents(long jarg1, INodeInfo jarg1_);

    public static final native String INodeInfo_meta(long jarg1, INodeInfo jarg1_);

    public static final native void INodeInfo_setMeta(long jarg1, INodeInfo jarg1_, String jarg2);

    public static final native String printNodeInfo(long jarg1, INodeInfo jarg1_);

    public static final native void delete_IFrontClient(long jarg1);

    public static final native void IFrontClient_onReceiveMessage(
            long jarg1, IFrontClient jarg1_, long jarg2, Message jarg2_, long jarg3);

    public static final native long new_ErrorCallback();

    public static final native void delete_ErrorCallback(long jarg1);

    public static final native void ErrorCallback_onError(
            long jarg1, ErrorCallback jarg1_, long jarg2, Error jarg2_);

    public static final native void ErrorCallback_director_connect(
            ErrorCallback obj, long cptr, boolean mem_own, boolean weak_global);

    public static final native void ErrorCallback_change_ownership(
            ErrorCallback obj, long cptr, boolean take_or_release);

    public static final native long new_MessageDispatcherHandler();

    public static final native void delete_MessageDispatcherHandler(long jarg1);

    public static final native void MessageDispatcherHandler_onMessage(
            long jarg1, MessageDispatcherHandler jarg1_, long jarg2, Message jarg2_);

    public static final native void MessageDispatcherHandler_director_connect(
            MessageDispatcherHandler obj, long cptr, boolean mem_own, boolean weak_global);

    public static final native void MessageDispatcherHandler_change_ownership(
            MessageDispatcherHandler obj, long cptr, boolean take_or_release);

    public static final native long new_SendResponseHandler(long jarg1);

    public static final native void delete_SendResponseHandler(long jarg1);

    public static final native void SendResponseHandler_sendResponse(
            long jarg1, SendResponseHandler jarg1_, long jarg2);

    public static final native long new_IMessageHandler();

    public static final native void delete_IMessageHandler(long jarg1);

    public static final native void IMessageHandler_onMessage(
            long jarg1,
            IMessageHandler jarg1_,
            long jarg2,
            Error jarg2_,
            long jarg3,
            Message jarg3_,
            long jarg4,
            SendResponseHandler jarg4_);

    public static final native void IMessageHandler_director_connect(
            IMessageHandler obj, long cptr, boolean mem_own, boolean weak_global);

    public static final native void IMessageHandler_change_ownership(
            IMessageHandler obj, long cptr, boolean take_or_release);

    public static final native long new_GetPeersInfoHandler();

    public static final native void delete_GetPeersInfoHandler(long jarg1);

    public static final native void GetPeersInfoHandler_onPeersInfo(
            long jarg1, GetPeersInfoHandler jarg1_, long jarg2, Error jarg2_, String jarg3);

    public static final native void GetPeersInfoHandler_director_connect(
            GetPeersInfoHandler obj, long cptr, boolean mem_own, boolean weak_global);

    public static final native void GetPeersInfoHandler_change_ownership(
            GetPeersInfoHandler obj, long cptr, boolean take_or_release);

    public static final native void delete_IFront(long jarg1);

    public static final native void IFront_start(long jarg1, IFront jarg1_);

    public static final native void IFront_stop(long jarg1, IFront jarg1_);

    public static final native void IFront_register_topic_handler(
            long jarg1, IFront jarg1_, String jarg2, long jarg3, MessageDispatcherHandler jarg3_);

    public static final native void IFront_register_msg_handler(
            long jarg1, IFront jarg1_, String jarg2, long jarg3, MessageDispatcherHandler jarg3_);

    public static final native void IFront_async_send_message(
            long jarg1,
            IFront jarg1_,
            int jarg2,
            long jarg3,
            MessageOptionalHeader jarg3_,
            byte[] jarg4,
            java.math.BigInteger jarg5,
            int jarg6,
            int jarg7,
            long jarg8,
            ErrorCallback jarg8_,
            long jarg9,
            IMessageHandler jarg9_);

    public static final native void IFront_async_send_response(
            long jarg1,
            IFront jarg1_,
            byte[] jarg2,
            java.math.BigInteger jarg3,
            String jarg4,
            byte[] jarg5,
            java.math.BigInteger jarg6,
            int jarg7,
            long jarg8,
            ErrorCallback jarg8_);

    public static final native long IFront_push_msg(
            long jarg1,
            IFront jarg1_,
            int jarg2,
            long jarg3,
            MessageOptionalHeader jarg3_,
            byte[] jarg4,
            java.math.BigInteger jarg5,
            int jarg6,
            int jarg7);

    public static final native long IFront_pop(long jarg1, IFront jarg1_, String jarg2, int jarg3);

    public static final native long IFront_peek(long jarg1, IFront jarg1_, String jarg2);

    public static final native void IFront_asyncGetPeers(
            long jarg1, IFront jarg1_, long jarg2, GetPeersInfoHandler jarg2_);

    public static final native long IFront_nodeInfo(long jarg1, IFront jarg1_);

    public static final native long IFront_registerTopic(long jarg1, IFront jarg1_, String jarg2);

    public static final native long IFront_unRegisterTopic(long jarg1, IFront jarg1_, String jarg2);

    public static final native void IFront_registerComponent(
            long jarg1, IFront jarg1_, String jarg2);

    public static final native void IFront_unRegisterComponent(
            long jarg1, IFront jarg1_, String jarg2);

    public static final native void IFront_updateMetaInfo(long jarg1, IFront jarg1_, String jarg2);

    public static final native long IFront_selectNodesByRoutePolicy(
            long jarg1, IFront jarg1_, short jarg2, long jarg3, MessageOptionalHeader jarg3_);

    public static final native long IFront_getNodeDiscovery(long jarg1, IFront jarg1_);

    public static final native void delete_IFrontBuilder(long jarg1);

    public static final native long IFrontBuilder_buildClient(
            long jarg1, IFrontBuilder jarg1_, String jarg2, long jarg3, boolean jarg4);

    public static final native void delete_INodeDiscovery(long jarg1);

    public static final native long INodeDiscovery_getAliveNodeList(
            long jarg1, INodeDiscovery jarg1_);

    public static final native int SDKMode_AIR_get();

    public static final native int SDKMode_PRO_get();

    public static final native long new_TransportBuilder();

    public static final native void delete_TransportBuilder(long jarg1);

    public static final native long TransportBuilder_buildProTransport(
            long jarg1, TransportBuilder jarg1_, long jarg2, FrontConfig jarg2_);

    public static final native long TransportBuilder_buildConfig(
            long jarg1, TransportBuilder jarg1_, int jarg2, String jarg3);

    public static final native long TransportBuilder_frontConfigBuilder(
            long jarg1, TransportBuilder jarg1_);

    public static final native void TransportBuilder_initLog(String jarg1);

    public static final native long new_Transport(long jarg1, FrontConfig jarg1_);

    public static final native void delete_Transport(long jarg1);

    public static final native void Transport_start(long jarg1, Transport jarg1_);

    public static final native void Transport_stop(long jarg1, Transport jarg1_);

    public static final native long Transport_getFront(long jarg1, Transport jarg1_);

    public static final native long Transport_gateway(long jarg1, Transport jarg1_);

    public static final native long Transport_msgPayloadBuilder(long jarg1, Transport jarg1_);

    public static final native long Transport_msgBuilder(long jarg1, Transport jarg1_);

    public static final native long Transport_msgHeaderBuilder(long jarg1, Transport jarg1_);

    public static final native long Transport_routeInfoBuilder(long jarg1, Transport jarg1_);

    public static final native long Transport_getConfig(long jarg1, Transport jarg1_);

    public static final native long IFront_SWIGSmartPtrUpcast(long jarg1);

    public static void SwigDirector_ErrorCallback_onError(ErrorCallback jself, long error) {
        jself.onError((error == 0) ? null : new Error(error, true));
    }

    public static void SwigDirector_MessageDispatcherHandler_onMessage(
            MessageDispatcherHandler jself, long msg) {
        jself.onMessage((msg == 0) ? null : new Message(msg, true));
    }

    public static void SwigDirector_IMessageHandler_onMessage(
            IMessageHandler jself, long e, long msg, long sendResponseHandler) {
        jself.onMessage(
                (e == 0) ? null : new Error(e, true),
                (msg == 0) ? null : new Message(msg, true),
                new SendResponseHandler(sendResponseHandler, true));
    }

    public static void SwigDirector_GetPeersInfoHandler_onPeersInfo(
            GetPeersInfoHandler jself, long e, String peersInfo) {
        jself.onPeersInfo((e == 0) ? null : new Error(e, true), peersInfo);
    }

    private static final native void swig_module_init();

    static {
        swig_module_init();
    }
}
