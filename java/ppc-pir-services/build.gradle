plugins {
    id 'java'
    id 'com.github.sherter.google-java-format' version '0.8'
}

group 'cn.webank.wedpr'
version '3.0.0'

repositories {
    maven {
        url = "https://mirrors.huaweicloud.com/repository/maven/"
    }
}

configurations.all {
    exclude group: "org.springframework.boot", module: "spring-boot-starter-logging"
    exclude group: "org.slf4j", module: "slf4j-log4j12"
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web:2.7.12'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:2.7.11'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.14.0'
    implementation 'com.mysql:mysql-connector-j:8.0.33'
    implementation 'org.mybatis:mybatis:3.5.13'
    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.2.2'
    implementation 'org.apache.logging.log4j:log4j-slf4j-impl:2.19.0'
    implementation 'commons-codec:commons-codec:1.15'
    implementation("org.apache.hadoop:hadoop-common:2.7.5"){
        exclude group: 'javax.servlet', module: 'servlet-api'
    }
    implementation("org.apache.hadoop:hadoop-client:2.7.5"){
        exclude group: 'javax.servlet', module: 'servlet-api'
    }
    implementation 'com.opencsv:opencsv:5.9'
    implementation 'com.squareup.okhttp3:okhttp:4.9.1'
    implementation project(":ppc-pir-sdk")
    implementation 'com.google.code.gson:gson:2.8.8'

    compileOnly 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'
}

jar {
    destinationDir file('dist/app')
    archiveName project.name + "-" + project.version + '.jar'
    exclude '**/*.xml'
    exclude '**/*.toml'
    exclude '**/*.properties'
    exclude '**/*.yml'
    exclude '**/*.crt'
    exclude '**/*.key'
    exclude '**/*.sql'
    exclude '**/*.pem'

    doLast {
        copy {
            from file('src/main/resources/')
            into 'dist/conf'
        }
        copy {
            from configurations.runtimeClasspath
            into 'dist/libs'
        }
        copy {
            from file('.').listFiles().findAll { File f -> (f.name.endsWith('.sh') || f.name.endsWith('.env')) }
            into 'dist'
        }
        copy {
            from file('script/')
            into 'dist'
        }
    }
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
        resources {
            srcDir 'src/main/resources'
            srcDir 'src/main/java'
        }
    }
}

test {
    useJUnitPlatform()
}


googleJavaFormat {
    options style: 'AOSP'
    source = sourceSets*.allJava
    include '**/*.java'
}

clean {
    file("dist/").deleteDir()
}



